let Router,DataManager,AccountManager,Login,Logout;_108‍.x([["default",()=>_108‍.o]]);_108‍.w("express",[["Router",["Router"],function(v){Router=v}]]);_108‍.w("../../mongo",[["default",["DataManager"],function(v){DataManager=v}]]);_108‍.w("../../mongo/account",[["default",["AccountManager"],function(v){AccountManager=v}]]);_108‍.w("./login",[["default",["Login"],function(v){Login=v}]]);_108‍.w("./logout",[["default",["Logout"],function(v){Logout=v}]]);







const Auth = Router();

Auth.use('*', (req, _, next) => {
    if (
        !req.headers.authorization ||
        !req.headers.authorization.match(/Bearer [^\s]+/)
    ) return next();

    const token = req.headers.authorization.split(/ /)[1];
    AccountManager.authorizeToken(token).then(async username => {
        const collection = await DataManager.collection('users');
        if (!collection) return next();

        const user = await collection.findOne({
            username
        }, {
            password: 0
        });

        req.user = user;
        next();
    }).catch(() => next());
});

Auth.use(Login);
Auth.use(Logout);

_108‍.d(Auth);